name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Permite obtener el token OIDC
      contents: read  # Permite leer el repositorio (si es necesario)
    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Install dependencies
      - name: Install Dependencies
        run: npm install

      # Run unit tests with Jest
      - name: Run Unit Tests
        run: npm test

      # Generate Jest coverage report
      - name: Generate Test Coverage
        run: npm test -- --coverage

      # - name: Configure AWS CLI
      #   run: |
      #     export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      #     export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
      #     export AWS_REGION="us-east-1"
      #     export AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
      #     aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID" --profile default && aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY" --profile default && aws configure set region "$AWS_REGION" --profile default && aws configure set output "json" --profile default
      #     echo "aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
      #     aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/app-as-challenge:${{ github.sha }} -f Dockerfile .
          docker tag ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/app-as-challenge:${CODEBUILD_RESOLVED_SOURCE_VERSION} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/app-as-challenge:latest

      - name: Push Docker Image
        run: |
          echo Pushing the Docker image...
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/app-as-challenge:${{ github.sha }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/app-as-challenge:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Deploy logic (example placeholder)
      - name: Deploy
        run: echo "Deploying the application.."
